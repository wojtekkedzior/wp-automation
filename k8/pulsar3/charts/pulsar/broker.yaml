broker:
  # use a component name that matches your grafana configuration
  # so the metrics are correctly rendered in grafana dashboard
  component: broker
  replicaCount: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    metrics: ~
  podMonitor:
    enabled: true
    interval: 10s
    scrapeTimeout: 10s
  # True includes annotation for statefulset that contains hash of corresponding configmap, which will cause pods to restart on configmap change
  restartPodsOnConfigMapChange: false
  ports:
    http: 8080
    https: 8443
    pulsar: 6650
    pulsarssl: 6651
  probe:
    liveness:
      enabled: true
      failureThreshold: 10
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
    readiness:
      enabled: true
      failureThreshold: 10
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
    startup:
      enabled: false
      failureThreshold: 30
      initialDelaySeconds: 60
      periodSeconds: 10
      timeoutSeconds: 5
  affinity:
    anti_affinity: true
    anti_affinity_topology_key: kubernetes.io/hostname
    # Set the anti affinity type. Valid values:
    # requiredDuringSchedulingIgnoredDuringExecution - rules must be met for pod to be scheduled (hard) requires at least one node per replica
    # preferredDuringSchedulingIgnoredDuringExecution - scheduler will try to enforce but not guranentee
    type: preferredDuringSchedulingIgnoredDuringExecution
  annotations: {}
  tolerations: []
  gracePeriod: 30
  resources:
    requests:
      memory: 1000Mi
      cpu: 2
    limits:
      memory: 2000Mi
      cpu: 2
  # extraVolumes and extraVolumeMounts allows you to mount other volumes
  # Example Use Case: mount ssl certificates
  # extraVolumes:
  #   - name: ca-certs
  #     secret:
  #       defaultMode: 420
  #       secretName: ca-certs
  # extraVolumeMounts:
  #   - name: ca-certs
  #     mountPath: /certs
  #     readOnly: true
  extraVolumes: []
  extraVolumeMounts: []
  extraEnvs: []
#    - name: POD_NAME
#      valueFrom:
#        fieldRef:
#          apiVersion: v1
#          fieldPath: metadata.name
  ## Broker configmap
  ## templates/broker-configmap.yaml
  ##
  configData:
    PULSAR_MEM: >
      -Xms128m -Xmx500m -XX:MaxDirectMemorySize=1400m
    PULSAR_GC: >
      -XX:+UseG1GC
      -XX:MaxGCPauseMillis=10
      -Dio.netty.leakDetectionLevel=disabled
      -Dio.netty.recycler.linkCapacity=1024
      -XX:+ParallelRefProcEnabled
      -XX:+UnlockExperimentalVMOptions
      -XX:+DoEscapeAnalysis
      -XX:ParallelGCThreads=4
      -XX:ConcGCThreads=4
      -XX:G1NewSizePercent=50
      -XX:+DisableExplicitGC
      -XX:-ResizePLAB
      -XX:+ExitOnOutOfMemoryError
      -XX:+PerfDisableSharedMem
    managedLedgerDefaultEnsembleSize: "2"
    managedLedgerDefaultWriteQuorum: "2"
    managedLedgerDefaultAckQuorum: "2"
    enableReplicatedSubscriptions: "true"
    replicatedSubscriptionsSnapshotTimeoutSeconds: "180"
    replicatedSubscriptionsSnapshotFrequencyMillis: "1000"
    managedLedgerMaxLedgerRolloverTimeMinutes: "3"
    managedLedgerMinLedgerRolloverTimeMinutes: "1"
    managedLedgerCursorRolloverTimeInSeconds: "60"
    managedLedgerMaxEntriesPerLedger: "100"
#    systemTopicEnabled: "true"
#    topicLevelPoliciesEnabled: "true"
    bookkeeperNumberOfChannelsPerBookie: "32"
    loadBalancerAutoBundleSplitEnabled: "true"
    bookkeeperClientTimeoutInSeconds: "180"
    # bookkeeperClientNumWorkerThreads: "10"
    #numIOThreads: "10"
    # managedLedgerCacheSizeMB:2500
    # loadBalancerResourceQuotaUpdateIntervalMinutes: "2"
    # loadBalancerNamespaceBundleMaxTopics: "5"
    # loadBalancerBrokerMaxTopics: "20"
    # loadBalancerSheddingIntervalMinutes: "1"
    # loadBalancerSheddingGracePeriodMinutes: "2"
    # loadBalancerReportUpdateThresholdPercentage: "1"
    # loadBalancerReportUpdateMaxIntervalMinutes: "1"
    # loadBalancerResourceQuotaUpdateIntervalMinutes: "1"
    # loadBalancerNamespaceBundleMaxMsgRate: "100"
    # loadBalancerSheddingIntervalMinutes: "2"
    # loadBalancerSheddingEnabled: "true"
    # loadManagerClassName: "org.apache.pulsar.broker.loadbalance.impl.ModularLoadManagerImpl"  
    # loadBalancerLoadSheddingStrategy: "org.apache.pulsar.broker.loadbalance.impl.ThresholdShedder"
    # loadBalancerBrokerThresholdShedderPercentage: "10"
    # loadBalancerBundleUnloadMinThroughputThreshold: "10"
    # loadBalancerBandwithOutResourceWeight: "1"
    # loadBalancerBandwithInResourceWeight: "1"
    # loadBalancerHistoryResourcePercentage: "2"
    # lowerBoundarySheddingEnabled: "true"
    # brokerDeduplicationEnabled: "true"
    # maxUnackedMessagesPerConsumer: "10000"
  ## Add a custom command to the start up process of the broker pods (e.g. update-ca-certificates, jvm commands, etc)
  additionalCommand:
  ## Broker service
  ## templates/broker-service.yaml
  ##
  service:
    annotations: {}
  ## Broker PodDisruptionBudget
  ## templates/broker-pdb.yaml
  ##
  pdb:
    usePolicy: true
    maxUnavailable: 1
  ### Broker service account
  ## templates/broker-service-account.yaml
  service_account:
    annotations: {}